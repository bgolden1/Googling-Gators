{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["SAXStream","require","XmlStream","BaseXform","node","text","name","model","options","map","Object","values","forEach","xform","reset","obj","assign","saxStream","stream","Promise","resolve","reject","abort","error","unpipe","on","events","eventType","value","parseOpen","parseText","parseClose","pipe","parse","xmlStream","render","xml","toXml","dflt","always","undefined","toString","toAttribute","attr","parseInt","parseFloat","module","exports"],"mappings":"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","sourcesContent":["const SAXStream = require('../../utils/sax-stream');\r\nconst XmlStream = require('../../utils/xml-stream');\r\n\r\n/* 'virtual' methods used as a form of documentation */\r\n/* eslint-disable class-methods-use-this */\r\n\r\n// Base class for Xforms\r\nclass BaseXform {\r\n  // constructor(/* model, name */) {}\r\n\r\n  // ============================================================\r\n  // Virtual Interface\r\n  prepare(/* model, options */) {\r\n    // optional preparation (mutation) of model so it is ready for write\r\n  }\r\n\r\n  render(/* xmlStream, model */) {\r\n    // convert model to xml\r\n  }\r\n\r\n  parseOpen(node) {\r\n    // XML node opened\r\n  }\r\n\r\n  parseText(text) {\r\n    // chunk of text encountered for current node\r\n  }\r\n\r\n  parseClose(name) {\r\n    // XML node closed\r\n  }\r\n\r\n  reconcile(model, options) {\r\n    // optional post-parse step (opposite to prepare)\r\n  }\r\n\r\n  // ============================================================\r\n  reset() {\r\n    // to make sure parses don't bleed to next iteration\r\n    this.model = null;\r\n\r\n    // if we have a map - reset them too\r\n    if (this.map) {\r\n      Object.values(this.map).forEach(xform => {\r\n        if (xform instanceof BaseXform) {\r\n          xform.reset();\r\n        } else if (xform.xform) {\r\n          xform.xform.reset();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  mergeModel(obj) {\r\n    // set obj's props to this.model\r\n    this.model = Object.assign(this.model || {}, obj);\r\n  }\r\n\r\n  async parse(saxStream, stream) {\r\n    return new Promise((resolve, reject) => {\r\n      const abort = error => {\r\n        if (stream) {\r\n          stream.unpipe(saxStream);\r\n        }\r\n        reject(error);\r\n      };\r\n      saxStream.on('data', events => {\r\n        try {\r\n          for (const {eventType, value} of events) {\r\n            if (eventType === 'opentag') {\r\n              this.parseOpen(value);\r\n            } else if (eventType === 'text') {\r\n              this.parseText(value);\r\n            } else if (eventType === 'closetag') {\r\n              if (!this.parseClose(value.name)) {\r\n                resolve(this.model);\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          abort(error);\r\n        }\r\n      });\r\n      saxStream.on('error', abort);\r\n      saxStream.on('end', () => {\r\n        resolve(this.model);\r\n      });\r\n    });\r\n  }\r\n\r\n  async parseStream(stream) {\r\n    const saxStream = new SAXStream(['opentag', 'text', 'closetag']);\r\n    stream.pipe(saxStream);\r\n    return this.parse(saxStream, stream);\r\n  }\r\n\r\n  get xml() {\r\n    // convenience function to get the xml of this.model\r\n    // useful for manager types that are built during the prepare phase\r\n    return this.toXml(this.model);\r\n  }\r\n\r\n  toXml(model) {\r\n    const xmlStream = new XmlStream();\r\n    this.render(xmlStream, model);\r\n    return xmlStream.xml;\r\n  }\r\n\r\n  // ============================================================\r\n  // Useful Utilities\r\n  static toAttribute(value, dflt, always = false) {\r\n    if (value === undefined) {\r\n      if (always) {\r\n        return dflt;\r\n      }\r\n    } else if (always || value !== dflt) {\r\n      return value.toString();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static toStringAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toStringValue(attr, dflt) {\r\n    return attr === undefined ? dflt : attr;\r\n  }\r\n\r\n  static toBoolAttribute(value, dflt, always = false) {\r\n    if (value === undefined) {\r\n      if (always) {\r\n        return dflt;\r\n      }\r\n    } else if (always || value !== dflt) {\r\n      return value ? '1' : '0';\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  static toBoolValue(attr, dflt) {\r\n    return attr === undefined ? dflt : attr === '1';\r\n  }\r\n\r\n  static toIntAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toIntValue(attr, dflt) {\r\n    return attr === undefined ? dflt : parseInt(attr, 10);\r\n  }\r\n\r\n  static toFloatAttribute(value, dflt, always = false) {\r\n    return BaseXform.toAttribute(value, dflt, always);\r\n  }\r\n\r\n  static toFloatValue(attr, dflt) {\r\n    return attr === undefined ? dflt : parseFloat(attr);\r\n  }\r\n}\r\n\r\nmodule.exports = BaseXform;\r\n"],"file":"base-xform.js"}