{"version":3,"sources":["../../../../lib/stream/xlsx/worksheet-reader.js"],"names":["require","EventEmitter","SAXStream","_","utils","colCache","Dimensions","Row","Column","WorksheetReader","workbook","id","name","_columns","_keys","_dimensions","Error","c","col","l2n","length","n","push","key","value","f","each","row","emit","entry","options","emitSheet","emitHyperlinks","hyperlinks","worksheets","autodrain","sharedStrings","styles","properties","inCols","inRows","inHyperlinks","cols","current","saxStream","on","events","eventType","node","min","parseInt","attributes","max","width","parseFloat","styleId","style","r","ht","height","s","getStyleModel","ref","t","text","v","hyperlink","rId","fromModel","expandRow","_emitRow","address","decodeAddress","cell","getCell","cellValue","formula","result","xmlDecode","index","sharedString","error","isDateFmt","numFmt","excelToDate","model","date1904","undefined","pipe","module","exports"],"mappings":"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","sourcesContent":["const {EventEmitter} = require('events');\r\nconst SAXStream = require('../../utils/sax-stream');\r\n\r\nconst _ = require('../../utils/under-dash');\r\nconst utils = require('../../utils/utils');\r\nconst colCache = require('../../utils/col-cache');\r\nconst Dimensions = require('../../doc/range');\r\n\r\nconst Row = require('../../doc/row');\r\nconst Column = require('../../doc/column');\r\n\r\nclass WorksheetReader extends EventEmitter {\r\n  constructor(workbook, id) {\r\n    super();\r\n\r\n    this.workbook = workbook;\r\n    this.id = id;\r\n\r\n    // and a name\r\n    this.name = `Sheet${this.id}`;\r\n\r\n    // column definitions\r\n    this._columns = null;\r\n    this._keys = {};\r\n\r\n    // keep a record of dimensions\r\n    this._dimensions = new Dimensions();\r\n  }\r\n\r\n  // destroy - not a valid operation for a streaming writer\r\n  // even though some streamers might be able to, it's a bad idea.\r\n  destroy() {\r\n    throw new Error('Invalid Operation: destroy');\r\n  }\r\n\r\n  // return the current dimensions of the writer\r\n  get dimensions() {\r\n    return this._dimensions;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\r\n  // are created.\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) {\r\n        return col;\r\n      }\r\n\r\n      // otherise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  }\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  }\r\n\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  }\r\n\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  }\r\n\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Read\r\n\r\n  _emitRow(row) {\r\n    this.emit('row', row);\r\n  }\r\n\r\n  read(entry, options) {\r\n    let emitSheet = false;\r\n    let emitHyperlinks = false;\r\n    let hyperlinks = null;\r\n    switch (options.worksheets) {\r\n      case 'emit':\r\n        emitSheet = true;\r\n        break;\r\n      case 'prep':\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    switch (options.hyperlinks) {\r\n      case 'emit':\r\n        emitHyperlinks = true;\r\n        break;\r\n      case 'cache':\r\n        this.hyperlinks = hyperlinks = {};\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (!emitSheet && !emitHyperlinks && !hyperlinks) {\r\n      entry.autodrain();\r\n      this.emit('finished');\r\n      return;\r\n    }\r\n\r\n    // references\r\n    const {sharedStrings} = this.workbook;\r\n    const {styles} = this.workbook;\r\n    const {properties} = this.workbook;\r\n\r\n    // xml position\r\n    let inCols = false;\r\n    let inRows = false;\r\n    let inHyperlinks = false;\r\n\r\n    // parse state\r\n    let cols = null;\r\n    let row = null;\r\n    let c = null;\r\n    let current = null;\r\n    const saxStream = new SAXStream(['opentag', 'text', 'closetag']);\r\n    saxStream.on('data', events => {\r\n      for (const {eventType, value} of events) {\r\n        if (eventType === 'opentag') {\r\n          const node = value;\r\n          if (emitSheet) {\r\n            switch (node.name) {\r\n              case 'cols':\r\n                inCols = true;\r\n                cols = [];\r\n                break;\r\n              case 'sheetData':\r\n                inRows = true;\r\n                break;\r\n\r\n              case 'col':\r\n                if (inCols) {\r\n                  cols.push({\r\n                    min: parseInt(node.attributes.min, 10),\r\n                    max: parseInt(node.attributes.max, 10),\r\n                    width: parseFloat(node.attributes.width),\r\n                    styleId: parseInt(node.attributes.style || '0', 10),\r\n                  });\r\n                }\r\n                break;\r\n\r\n              case 'row':\r\n                if (inRows) {\r\n                  const r = parseInt(node.attributes.r, 10);\r\n                  row = new Row(this, r);\r\n                  if (node.attributes.ht) {\r\n                    row.height = parseFloat(node.attributes.ht);\r\n                  }\r\n                  if (node.attributes.s) {\r\n                    const styleId = parseInt(node.attributes.s, 10);\r\n                    const style = styles.getStyleModel(styleId);\r\n                    if (style) {\r\n                      row.style = style;\r\n                    }\r\n                  }\r\n                }\r\n                break;\r\n              case 'c':\r\n                if (row) {\r\n                  c = {\r\n                    ref: node.attributes.r,\r\n                    s: parseInt(node.attributes.s, 10),\r\n                    t: node.attributes.t,\r\n                  };\r\n                }\r\n                break;\r\n              case 'f':\r\n                if (c) {\r\n                  current = c.f = {text: ''};\r\n                }\r\n                break;\r\n              case 'v':\r\n                if (c) {\r\n                  current = c.v = {text: ''};\r\n                }\r\n                break;\r\n              case 'mergeCell':\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          // =================================================================\r\n          //\r\n          if (emitHyperlinks || hyperlinks) {\r\n            switch (node.name) {\r\n              case 'hyperlinks':\r\n                inHyperlinks = true;\r\n                break;\r\n              case 'hyperlink':\r\n                if (inHyperlinks) {\r\n                  const hyperlink = {\r\n                    ref: node.attributes.ref,\r\n                    rId: node.attributes['r:id'],\r\n                  };\r\n                  if (emitHyperlinks) {\r\n                    this.emit('hyperlink', hyperlink);\r\n                  } else {\r\n                    hyperlinks[hyperlink.ref] = hyperlink;\r\n                  }\r\n                }\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n        } else if (eventType === 'text') {\r\n          // only text data is for sheet values\r\n          if (emitSheet) {\r\n            if (current) {\r\n              current.text += value;\r\n            }\r\n          }\r\n        } else if (eventType === 'closetag') {\r\n          const node = value;\r\n          if (emitSheet) {\r\n            switch (node.name) {\r\n              case 'cols':\r\n                inCols = false;\r\n                this._columns = Column.fromModel(cols);\r\n                break;\r\n              case 'sheetData':\r\n                inRows = false;\r\n                break;\r\n\r\n              case 'row':\r\n                this._dimensions.expandRow(row);\r\n                this._emitRow(row);\r\n                row = null;\r\n                break;\r\n\r\n              case 'c':\r\n                if (row && c) {\r\n                  const address = colCache.decodeAddress(c.ref);\r\n                  const cell = row.getCell(address.col);\r\n                  if (c.s) {\r\n                    const style = styles.getStyleModel(c.s);\r\n                    if (style) {\r\n                      cell.style = style;\r\n                    }\r\n                  }\r\n\r\n                  if (c.f) {\r\n                    const cellValue = {\r\n                      formula: c.f.text,\r\n                    };\r\n                    if (c.v) {\r\n                      if (c.t === 'str') {\r\n                        cellValue.result = utils.xmlDecode(c.v.text);\r\n                      } else {\r\n                        cellValue.result = parseFloat(c.v.text);\r\n                      }\r\n                    }\r\n                    cell.value = cellValue;\r\n                  } else if (c.v) {\r\n                    switch (c.t) {\r\n                      case 's': {\r\n                        const index = parseInt(c.v.text, 10);\r\n                        if (sharedStrings) {\r\n                          cell.value = sharedStrings[index];\r\n                        } else {\r\n                          cell.value = {\r\n                            sharedString: index,\r\n                          };\r\n                        }\r\n                        break;\r\n                      }\r\n\r\n                      case 'str':\r\n                        cell.value = utils.xmlDecode(c.v.text);\r\n                        break;\r\n\r\n                      case 'e':\r\n                        cell.value = {error: c.v.text};\r\n                        break;\r\n\r\n                      case 'b':\r\n                        cell.value = parseInt(c.v.text, 10) !== 0;\r\n                        break;\r\n\r\n                      default:\r\n                        if (utils.isDateFmt(cell.numFmt)) {\r\n                          cell.value = utils.excelToDate(parseFloat(c.v.text), properties.model.date1904);\r\n                        } else {\r\n                          cell.value = parseFloat(c.v.text);\r\n                        }\r\n                        break;\r\n                    }\r\n                  }\r\n                  if (hyperlinks) {\r\n                    const hyperlink = hyperlinks[c.ref];\r\n                    if (hyperlink) {\r\n                      cell.text = cell.value;\r\n                      cell.value = undefined;\r\n                      cell.hyperlink = hyperlink;\r\n                    }\r\n                  }\r\n                  c = null;\r\n                }\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n          if (emitHyperlinks || hyperlinks) {\r\n            switch (node.name) {\r\n              case 'hyperlinks':\r\n                inHyperlinks = false;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    saxStream.on('error', error => {\r\n      this.emit('error', error);\r\n    });\r\n    saxStream.on('end', () => {\r\n      this.emit('finished');\r\n    });\r\n    entry.pipe(saxStream);\r\n  }\r\n}\r\n\r\nmodule.exports = WorksheetReader;\r\n"],"file":"worksheet-reader.js"}