{"version":3,"sources":["../../../lib/doc/row.js"],"names":["_","require","Enums","colCache","Cell","Row","worksheet","number","_worksheet","_number","_cells","style","outlineLevel","_commitRow","colNumber","address","cell","col","column","getColumn","getColumnKey","l2n","getCellEx","encodeAddress","row","start","count","nKeep","inserts","nExpand","length","nEnd","i","cSrc","cDst","getCell","value","undefined","options","iteratee","includeEmpty","n","forEach","index","type","ValueType","Null","lft","rght","ws","left","Math","max","right","pb","id","man","min","rowBreaks","push","name","values","Array","offset","hasOwnProperty","item","eachColumnKey","key","some","eachCell","numFmt","_applyStyle","font","alignment","protection","border","fill","_hidden","_outlineLevel","properties","outlineLevelRow","cells","cellModel","model","height","hidden","collapsed","Error","previousAddress","Types","Merge","decodeAddress","$col$row","n2l","JSON","parse","stringify","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst _ = require('../utils/under-dash');\r\n\r\nconst Enums = require('./enums');\r\nconst colCache = require('../utils/col-cache');\r\nconst Cell = require('./cell');\r\n\r\nclass Row {\r\n  constructor(worksheet, number) {\r\n    this._worksheet = worksheet;\r\n    this._number = number;\r\n    this._cells = [];\r\n    this.style = {};\r\n    this.outlineLevel = 0;\r\n  }\r\n\r\n  // return the row number\r\n  get number() {\r\n    return this._number;\r\n  }\r\n\r\n  get worksheet() {\r\n    return this._worksheet;\r\n  }\r\n\r\n  // Inform Streaming Writer that this row (and all rows before it) are complete\r\n  // and ready to write. Has no effect on Worksheet document\r\n  commit() {\r\n    this._worksheet._commitRow(this); // eslint-disable-line no-underscore-dangle\r\n  }\r\n\r\n  // helps GC by breaking cyclic references\r\n  destroy() {\r\n    delete this._worksheet;\r\n    delete this._cells;\r\n    delete this.style;\r\n  }\r\n\r\n  findCell(colNumber) {\r\n    return this._cells[colNumber - 1];\r\n  }\r\n\r\n  // given {address, row, col}, find or create new cell\r\n  getCellEx(address) {\r\n    let cell = this._cells[address.col - 1];\r\n    if (!cell) {\r\n      const column = this._worksheet.getColumn(address.col);\r\n      cell = new Cell(this, column, address.address);\r\n      this._cells[address.col - 1] = cell;\r\n    }\r\n    return cell;\r\n  }\r\n\r\n  // get cell by key, letter or column number\r\n  getCell(col) {\r\n    if (typeof col === 'string') {\r\n      // is it a key?\r\n      const column = this._worksheet.getColumnKey(col);\r\n      if (column) {\r\n        col = column.number;\r\n      } else {\r\n        col = colCache.l2n(col);\r\n      }\r\n    }\r\n    return (\r\n      this._cells[col - 1] ||\r\n      this.getCellEx({\r\n        address: colCache.encodeAddress(this._number, col),\r\n        row: this._number,\r\n        col,\r\n      })\r\n    );\r\n  }\r\n\r\n  // remove cell(s) and shift all higher cells down by count\r\n  splice(start, count, ...inserts) {\r\n    const nKeep = start + count;\r\n    const nExpand = inserts.length - count;\r\n    const nEnd = this._cells.length;\r\n    let i;\r\n    let cSrc;\r\n    let cDst;\r\n\r\n    if (nExpand < 0) {\r\n      // remove cells\r\n      for (i = start + inserts.length; i <= nEnd; i++) {\r\n        cDst = this._cells[i - 1];\r\n        cSrc = this._cells[i - nExpand - 1];\r\n        if (cSrc) {\r\n          cDst = this.getCell(i);\r\n          cDst.value = cSrc.value;\r\n          cDst.style = cSrc.style;\r\n        } else if (cDst) {\r\n          cDst.value = null;\r\n          cDst.style = {};\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        cSrc = this._cells[i - 1];\r\n        if (cSrc) {\r\n          cDst = this.getCell(i + nExpand);\r\n          cDst.value = cSrc.value;\r\n          cDst.style = cSrc.style;\r\n        } else {\r\n          this._cells[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now add the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      cDst = this.getCell(start + i);\r\n      cDst.value = inserts[i];\r\n      cDst.style = {};\r\n    }\r\n  }\r\n\r\n  // Iterate over all non-null cells in this row\r\n  eachCell(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = null;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      const n = this._cells.length;\r\n      for (let i = 1; i <= n; i++) {\r\n        iteratee(this.getCell(i), i);\r\n      }\r\n    } else {\r\n      this._cells.forEach((cell, index) => {\r\n        if (cell && cell.type !== Enums.ValueType.Null) {\r\n          iteratee(cell, index + 1);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Page Breaks\r\n  addPageBreak(lft, rght) {\r\n    const ws = this._worksheet;\r\n    const left = Math.max(0, lft - 1) || 0;\r\n    const right = Math.max(0, rght - 1) || 16838;\r\n    const pb = {\r\n      id: this._number,\r\n      max: right,\r\n      man: 1,\r\n    };\r\n    if (left) pb.min = left;\r\n\r\n    ws.rowBreaks.push(pb);\r\n  }\r\n\r\n  // return a sparse array of cell values\r\n  get values() {\r\n    const values = [];\r\n    this._cells.forEach(cell => {\r\n      if (cell && cell.type !== Enums.ValueType.Null) {\r\n        values[cell.col] = cell.value;\r\n      }\r\n    });\r\n    return values;\r\n  }\r\n\r\n  // set the values by contiguous or sparse array, or by key'd object literal\r\n  set values(value) {\r\n    // this operation is not additive - any prior cells are removed\r\n    this._cells = [];\r\n    if (!value) {\r\n      // empty row\r\n    } else if (value instanceof Array) {\r\n      let offset = 0;\r\n      if (value.hasOwnProperty('0')) {\r\n        // contiguous array - start at column 1\r\n        offset = 1;\r\n      }\r\n      value.forEach((item, index) => {\r\n        if (item !== undefined) {\r\n          this.getCellEx({\r\n            address: colCache.encodeAddress(this._number, index + offset),\r\n            row: this._number,\r\n            col: index + offset,\r\n          }).value = item;\r\n        }\r\n      });\r\n    } else {\r\n      // assume object with column keys\r\n      this._worksheet.eachColumnKey((column, key) => {\r\n        if (value[key] !== undefined) {\r\n          this.getCellEx({\r\n            address: colCache.encodeAddress(this._number, column.number),\r\n            row: this._number,\r\n            col: column.number,\r\n          }).value = value[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // returns true if the row includes at least one cell with a value\r\n  get hasValues() {\r\n    return _.some(this._cells, cell => cell && cell.type !== Enums.ValueType.Null);\r\n  }\r\n\r\n  get cellCount() {\r\n    return this._cells.length;\r\n  }\r\n\r\n  get actualCellCount() {\r\n    let count = 0;\r\n    this.eachCell(() => {\r\n      count++;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // get the min and max column number for the non-null cells in this row or null\r\n  get dimensions() {\r\n    let min = 0;\r\n    let max = 0;\r\n    this._cells.forEach(cell => {\r\n      if (cell && cell.type !== Enums.ValueType.Null) {\r\n        if (!min || min > cell.col) {\r\n          min = cell.col;\r\n        }\r\n        if (max < cell.col) {\r\n          max = cell.col;\r\n        }\r\n      }\r\n    });\r\n    return min > 0\r\n      ? {\r\n          min,\r\n          max,\r\n        }\r\n      : null;\r\n  }\r\n\r\n  // =========================================================================\r\n  // styles\r\n  _applyStyle(name, value) {\r\n    this.style[name] = value;\r\n    this._cells.forEach(cell => {\r\n      if (cell) {\r\n        cell[name] = value;\r\n      }\r\n    });\r\n    return value;\r\n  }\r\n\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  }\r\n\r\n  set numFmt(value) {\r\n    this._applyStyle('numFmt', value);\r\n  }\r\n\r\n  get font() {\r\n    return this.style.font;\r\n  }\r\n\r\n  set font(value) {\r\n    this._applyStyle('font', value);\r\n  }\r\n\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  }\r\n\r\n  set alignment(value) {\r\n    this._applyStyle('alignment', value);\r\n  }\r\n\r\n  get protection() {\r\n    return this.style.protection;\r\n  }\r\n\r\n  set protection(value) {\r\n    this._applyStyle('protection', value);\r\n  }\r\n\r\n  get border() {\r\n    return this.style.border;\r\n  }\r\n\r\n  set border(value) {\r\n    this._applyStyle('border', value);\r\n  }\r\n\r\n  get fill() {\r\n    return this.style.fill;\r\n  }\r\n\r\n  set fill(value) {\r\n    this._applyStyle('fill', value);\r\n  }\r\n\r\n  get hidden() {\r\n    return !!this._hidden;\r\n  }\r\n\r\n  set hidden(value) {\r\n    this._hidden = value;\r\n  }\r\n\r\n  get outlineLevel() {\r\n    return this._outlineLevel || 0;\r\n  }\r\n\r\n  set outlineLevel(value) {\r\n    this._outlineLevel = value;\r\n  }\r\n\r\n  get collapsed() {\r\n    return !!(this._outlineLevel && this._outlineLevel >= this._worksheet.properties.outlineLevelRow);\r\n  }\r\n\r\n  // =========================================================================\r\n  get model() {\r\n    const cells = [];\r\n    let min = 0;\r\n    let max = 0;\r\n    this._cells.forEach(cell => {\r\n      if (cell) {\r\n        const cellModel = cell.model;\r\n        if (cellModel) {\r\n          if (!min || min > cell.col) {\r\n            min = cell.col;\r\n          }\r\n          if (max < cell.col) {\r\n            max = cell.col;\r\n          }\r\n          cells.push(cellModel);\r\n        }\r\n      }\r\n    });\r\n\r\n    return this.height || cells.length\r\n      ? {\r\n          cells,\r\n          number: this.number,\r\n          min,\r\n          max,\r\n          height: this.height,\r\n          style: this.style,\r\n          hidden: this.hidden,\r\n          outlineLevel: this.outlineLevel,\r\n          collapsed: this.collapsed,\r\n        }\r\n      : null;\r\n  }\r\n\r\n  set model(value) {\r\n    if (value.number !== this._number) {\r\n      throw new Error('Invalid row number in model');\r\n    }\r\n    this._cells = [];\r\n    let previousAddress;\r\n    value.cells.forEach(cellModel => {\r\n      switch (cellModel.type) {\r\n        case Cell.Types.Merge:\r\n          // special case - don't add this types\r\n          break;\r\n        default: {\r\n          let address;\r\n          if (cellModel.address) {\r\n            address = colCache.decodeAddress(cellModel.address);\r\n          } else if (previousAddress) {\r\n            // This is a <c> element without an r attribute\r\n            // Assume that it's the cell for the next column\r\n            const {row} = previousAddress;\r\n            const col = previousAddress.col + 1;\r\n            address = {\r\n              row,\r\n              col,\r\n              address: colCache.encodeAddress(row, col),\r\n              $col$row: `$${colCache.n2l(col)}$${row}`,\r\n            };\r\n          }\r\n          previousAddress = address;\r\n          const cell = this.getCellEx(address);\r\n          cell.model = cellModel;\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (value.height) {\r\n      this.height = value.height;\r\n    } else {\r\n      delete this.height;\r\n    }\r\n\r\n    this.hidden = value.hidden;\r\n    this.outlineLevel = value.outlineLevel || 0;\r\n\r\n    this.style = (value.style && JSON.parse(JSON.stringify(value.style))) || {};\r\n  }\r\n}\r\n\r\nmodule.exports = Row;\r\n"],"file":"row.js"}