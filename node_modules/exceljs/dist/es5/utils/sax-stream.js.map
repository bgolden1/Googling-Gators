{"version":3,"sources":["../../../lib/utils/sax-stream.js"],"names":["Stream","require","SaxesParser","module","exports","eventTypes","readableObjectMode","events","saxesParser","on","error","destroy","eventType","value","push","chunk","_encoding","callback","write","toString","close","Transform"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;eACsBA,OAAO,CAAC,OAAD,C;IAAtBC,W,YAAAA,W;;AAEPC,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE,qBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAM;AAACC,MAAAA,kBAAkB,EAAE;AAArB,KAAN;AACA,UAAKC,MAAL,GAAc,EAAd;AACA,UAAKC,WAAL,GAAmB,IAAIN,WAAJ,EAAnB;;AACA,UAAKM,WAAL,CAAiBC,EAAjB,CAAoB,OAApB,EAA6B,UAAAC,KAAK,EAAI;AACpC,YAAKC,OAAL,CAAaD,KAAb;AACD,KAFD;;AAJsB,+CAOEL,UAPF;AAAA;;AAAA;AAAA;AAAA,YAOXO,SAPW;;AAQpB,YAAIA,SAAS,KAAK,OAAd,IAAyBA,SAAS,KAAK,OAAvC,IAAkDA,SAAS,KAAK,KAApE,EAA2E;AACzE,gBAAKJ,WAAL,CAAiBC,EAAjB,CAAoBG,SAApB,EAA+B,UAAAC,KAAK,EAAI;AACtC,kBAAKN,MAAL,CAAYO,IAAZ,CAAiB;AAACF,cAAAA,SAAS,EAATA,SAAD;AAAYC,cAAAA,KAAK,EAALA;AAAZ,aAAjB;AACD,WAFD;AAGD;AAZmB;;AAOtB,0DAAoC;AAAA;AAMnC;AAbqB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAcvB;;AAfH;AAAA;AAAA,+BAiBaE,KAjBb,EAiBoBC,SAjBpB,EAiB+BC,QAjB/B,EAiByC;AACrC,WAAKT,WAAL,CAAiBU,KAAjB,CAAuBH,KAAK,CAACI,QAAN,EAAvB,EADqC,CAErC;AACA;;AAHqC,UAI9BZ,MAJ8B,GAIpB,IAJoB,CAI9BA,MAJ8B;AAKrC,WAAKA,MAAL,GAAc,EAAd,CALqC,CAMrC;AACA;;AACAU,MAAAA,QAAQ,CAAC,IAAD,EAAOV,MAAP,CAAR;AACD;AA1BH;AAAA;AAAA,2BA4BSU,QA5BT,EA4BmB;AACf,WAAKT,WAAL,CAAiBY,KAAjB;AACAH,MAAAA,QAAQ;AACT;AA/BH;;AAAA;AAAA,EAAyCjB,MAAM,CAACqB,SAAhD","sourcesContent":["const Stream = require('readable-stream');\r\nconst {SaxesParser} = require('saxes');\r\n\r\nmodule.exports = class SAXStream extends Stream.Transform {\r\n  constructor(eventTypes) {\r\n    super({readableObjectMode: true});\r\n    this.events = [];\r\n    this.saxesParser = new SaxesParser();\r\n    this.saxesParser.on('error', error => {\r\n      this.destroy(error);\r\n    });\r\n    for (const eventType of eventTypes) {\r\n      if (eventType !== 'ready' && eventType !== 'error' && eventType !== 'end') {\r\n        this.saxesParser.on(eventType, value => {\r\n          this.events.push({eventType, value});\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  _transform(chunk, _encoding, callback) {\r\n    this.saxesParser.write(chunk.toString());\r\n    // saxesParser.write and saxesParser.on() are synchronous,\r\n    // so we can only reach the below line once all events have been emitted\r\n    const {events} = this;\r\n    this.events = [];\r\n    // As a performance optimization, we gather all events instead of passing\r\n    // them one by one, which would cause each event to go through the event queue\r\n    callback(null, events);\r\n  }\r\n\r\n  _final(callback) {\r\n    this.saxesParser.close();\r\n    callback();\r\n  }\r\n};\r\n"],"file":"sax-stream.js"}